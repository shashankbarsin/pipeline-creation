trigger:
- master

resources:
- repo: self

variables:

  # Update Azure.ResourceGroupName value with Azure resource group name.
  Azure.ResourceGroupName: '{{#toAlphaNumericString repositoryName 50}}{{/toAlphaNumericString}}'

  # Update Azure.ServiceConnectionId value with AzureRm service endpoint.
  Azure.ServiceConnectionId: '{{azureServiceConnectionId}}'

  # Update Azure.Location value with Azure Location.
  Azure.Location: 'eastus'

  ContainerRegistry.ServiceConnection: '{{containerRegistryServiceConnection}}'
  ContainerRegistry.Name: '{{containerRegistry}}'

  Image.Repository: '$(Build.Repository.Name)'

  # Update AKS.ClusterName value Azure kubernetes cluster name.
  AKS.ClusterName: '{{#toAlphaNumericString repositoryName 32}}{{/toAlphaNumericString}}'

  # Based on PORT in Dockerfile. Otherwise default value set
  Container.Port: {{containerPort}}

  # Implicilty generated during pipeline creation flow
  Environment.Name: '{{environmentName}}'
  Environment.k8sResource.Name: '{{k8sResourceName}}'
  Environment.k8sResource.Namespace: '{{k8sResourceNamespace}}'

stages:
- stage: CreateResources
  displayName: Create resources stage
  jobs:
  - job: CreateResources
    displayName: Create resources job
    steps:
    - task: AzureResourceGroupDeployment@2
      displayName: 'Azure Deployment:Create ACR and AKS'
      inputs:
        azureSubscription: '$(Azure.ServiceConnectionId)'
        resourceGroupName: '$(Azure.ResourceGroupName)'
        location: '$(Azure.Location)'
        templateLocation: 'URL of the file'
        addSpnToEnvironment: true
        csmFileLink: 'https://raw.githubusercontent.com/Microsoft/azure-pipelines-yaml/master/templates/resources/arm/aks.json'
        overrideParameters: '-registryName "$(ContainerRegistry.Name)" -registryLocation "$(Azure.Location)" -servicePrincipalId $servicePrincipalId -servicePrincipalKey $servicePrincipalKey -clusterName "$(AKS.ClusterName)" -clusterLocation "$(Azure.Location)"'

- stage: Build
  displayName: Build stage
  dependsOn: CreateResources
  jobs:
  - job: Build
    displayName: Build job
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(Image.Repository)
        containerRegistries: |
          $(ContainerRegistry.ServiceConnection)

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy to Kubernetes
    displayName: Deploy job
    environment: $(Environment.Name).$(Environment.k8sResource.Name)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(Environment.k8sResource.Namespace)
              secrets: |
                docker-registry imagePullSecret1 $(ContainerRegistry.ServiceConnection)
              manifests: |
                manifests/*
              containers: |
                $(ContainerRegistry.Name)/$(Image.Repository)